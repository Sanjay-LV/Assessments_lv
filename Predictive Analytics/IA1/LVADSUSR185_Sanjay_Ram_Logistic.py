# -*- coding: utf-8 -*-
"""Predictive_analytics_IA1_Logistic_Regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OGdsQA5Tyl3HbKQ1CweSb0SzTFm2__wj
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
df = pd.read_csv("/content/booking.csv")
df.head(10)

df.drop(columns=['Booking_ID'])

"""1.Handling missing values and outliers"""

df.info()
df.describe()

# Plot histograms for numerical columns
for column in df.select_dtypes(include=['float64', 'int64']).columns:
    plt.figure(figsize=(10, 5))
    sns.histplot(df[column])
    plt.title(f'Histogram of {column}')
    plt.xlabel(column)
    plt.ylabel('Frequency')
    plt.show()

df.isna().sum()

label = LabelEncoder()
df['room type'] = label.fit_transform(df['room type'])

df.head()

df.dropna()

df['average price'] = df['average price'].fillna(df['average price'].median())
df.isnull().sum()

#Outliers detection

numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns

for column in numerical_columns:
    plt.figure(figsize=(10, 6))
    sns.boxplot(x=df[column])
    plt.title(f'Box Plot of {column}')
    plt.xlabel(column)
    plt.show()

df['type of meal'] = label.fit_transform(df['type of meal'])
df['market segment type'] = label.fit_transform(df['market segment type'])
df['booking status'] = label.fit_transform(df['booking status'])

df = df.drop(columns=['Booking_ID','date of reservation'])

df.info()

correlation_matrix = df.corr()
correlation_matrix

#No duplicate values present in the data
df.duplicated()

df.head(5)

X = df.drop(columns=['booking status','P-C','P-not-C','number of children'])
y = df['booking status']

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2, random_state=75)

min_max_scaler = MinMaxScaler()
X_train = pd.DataFrame(min_max_scaler.fit_transform(X_train[list(X.columns)]),columns=X.columns)
X_test = pd.DataFrame(min_max_scaler.fit_transform(X_test[list(X.columns)]),columns=X.columns)

from sklearn.linear_model import LogisticRegression
model = LogisticRegression()
model.fit(X_train,y_train)

y_pred = model.predict(X_test)

from sklearn.metrics import confusion_matrix,accuracy_score, classification_report, precision_recall_fscore_support, precision_recall_curve
accuracy = accuracy_score(y_test, y_pred)
classification_report = classification_report(y_test, y_pred)
print(f"Accuracy: {accuracy}\nClassification Report:\n{classification_report}")

cm = confusion_matrix(y_test,y_pred)
print(cm)

sns.heatmap(cm,
            annot=True,
            fmt='g',
            xticklabels=['1','0'],
            yticklabels=['1','0'])
plt.ylabel('Prediction',fontsize=13)
plt.xlabel('Actual',fontsize=13)
plt.title('Confusion Matrix',fontsize=17)
plt.show()

