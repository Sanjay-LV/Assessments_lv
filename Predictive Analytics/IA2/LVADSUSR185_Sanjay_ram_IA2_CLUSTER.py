# -*- coding: utf-8 -*-
"""Predicitve_analytics_Clustering_IA2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IHDZKjRPUqDdYZhputBVU3eQp1Uqy6VX
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, precision_score, recall_score, confusion_matrix, classification_report
from sklearn.preprocessing import MinMaxScaler, LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from imblearn.over_sampling import SMOTE

df = pd.read_csv("/content/Mall_Customers.csv")
df.head()

df.info()

df.describe()

df.isnull().sum()

for column in df.select_dtypes(include=['object']).columns:
    plt.figure(figsize=(10, 5))
    df[column].value_counts().plot(kind='bar')
    plt.title(f'Bar Chart of {column}')
    plt.xlabel(column)
    plt.ylabel('Count')
    plt.show()

df['Annual Income (k$)']=df['Annual Income (k$)'].fillna(df['Annual Income (k$)'].median())

df.info()

numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns
for i in range(len(numerical_columns)):
    for j in range(i + 1, len(numerical_columns)):
        plt.figure(figsize=(10, 6))
        sns.scatterplot(data=df, x=numerical_columns[i], y=numerical_columns[j])
        plt.title(f'Scatter Plot between {numerical_columns[i]} and {numerical_columns[j]}')
        plt.show()

numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns

for column in numerical_columns:
    plt.figure(figsize=(10, 6))
    sns.boxplot(x=df[column])
    plt.title(f'Box Plot of {column}')
    plt.xlabel(column)
    plt.show()

correlation_matrix = df[numerical_columns].corr()
print(correlation_matrix)

# Calculate Q1, Q3, and IQR
q1 = np.percentile(df["Spending Score (1-100)"]	, 25)
q3 = np.percentile(df["Spending Score (1-100)"]	, 75)
iqr = q3 - q1

# Calculate outlier bounds
lower_bound = q1 - 1.5 * iqr
upper_bound = q3 + 1.5 * iqr

print("Q1:", q1)
print("Q3:", q3)
print("IQR:", iqr)
print("Lower Bound (Outlier):", lower_bound)
print("Upper Bound (Outlier):", upper_bound)

from sklearn.preprocessing import LabelEncoder
label = LabelEncoder()
df['Gender'] = label.fit_transform(df['Gender'])

scaler = MinMaxScaler()
scaler.fit(df)
scaled_df = scaler.transform(df)

scaled_df = pd.DataFrame(scaled_df)
scaled_df.columns = df.columns
scaled_df.head(5)

km = KMeans(n_clusters=3)
y_predicted = km.fit_predict(scaled_df[['Annual Income (k$)','Spending Score (1-100)']])
#y_predicted
scaled_df['cluster']=y_predicted
#df.head(25)
print(km.cluster_centers_)

df1 = scaled_df[scaled_df.cluster==0]
df2 = scaled_df[scaled_df.cluster==1]
df3 = scaled_df[scaled_df.cluster==2]
plt.scatter(df1['Annual Income (k$)'],df1['Spending Score (1-100)'],color='green')
plt.scatter(df2['Annual Income (k$)'],df2['Spending Score (1-100)'],color='red')
plt.scatter(df3['Annual Income (k$)'],df3['Spending Score (1-100)'],color='black')
plt.scatter(km.cluster_centers_[:,0],km.cluster_centers_[:,1],color='purple',marker='*',label='centroid')
plt.xlabel('Annual income')
plt.ylabel('Spending score')
plt.legend()

sse=[]
k_rng = range(1,10)
for k in k_rng:
   km = KMeans(n_clusters=k)
   km.fit(df[['Annual Income (k$)','Spending Score (1-100)']])
   sse.append(km.inertia_)

plt.xlabel('K')
plt.ylabel('Sum of squared error')
plt.plot(k_rng,sse)

silhouette_score(scaled_df[['Annual Income (k$)','Spending Score (1-100)']], km.fit_predict(scaled_df[['Annual Income (k$)','Spending Score (1-100)']]))

# Spending scre for higher annual incomes are clustered into one grp
# Spending score and annual incomes for medium level are grouped into one cluster
#Spending score with low annual incomes are more in the grpah view above.