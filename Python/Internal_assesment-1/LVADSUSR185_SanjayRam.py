# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U0cHJG8aKciYJSjZ-TmNwnlp2DS14mcj

LAB SECTION-1
"""

#Qn 1:
length = int(input("Enter the length of the property in metres"))
width = int(input("Enter the width of the property in metres"))
area = length*width
print(f"The area of the property in m is:{area} sq metres")

if area<100000:
  print("The property is small")
elif area>100000 and area<500000:
  print("The property is medium sized")
else:
  print("The property is huge")

#Qn 2:
weight = int(input("Enter the weight in kg:"))
height = int(input("Enter the height in m"))*(0.01)

bmi = (weight/(height**2))
print(f"the BMI of the specified person in {bmi}")

#Qn 3:
student_dic = {"Anitha":{"Mathematics":"A","Science":"B","English":"C"},
               "Abay":{"Mathematics":"C","Science":"A","English":"A"},
               "Haveesh":{"Mathematics":"B","Science":"D","English":"A"}}

# The dictionary record for each student is created where string is the key and dictionaries are values.Inside the dictionaries,
# each subject grades are specified that can be retrieved using the student name.If they want to add or update records they can do inside the dictionary

"""LAB SECTION-2"""

#Qn 4:
age = int(input("Enter the age of the person"))
if age<10:
  print("This content is for children below 10 years")
elif age>10 and age<18:
  print("This content is advisable for teens who are below 18 years ")
elif age>=18 and age<40:
  print("Higly advisable for adults that contains some inexplicit content")
elif age>=40:
  print("These collections are available for senior adults aged above 40")

#Qn 5:
import numpy as np
subscriber_ids = np.arange(100)

for ids in subscriber_ids:
  if ids%2==0:
    print(ids)

#Qn 6:
password = "Jabronis@123"

while(True):
  user_password = input("Enter the password")
  if user_password == password:
    print("It matched the password that accesses financial docs")
    break

"""LAB SECTION-3"""

#Qn 7:
class customer_feedback:
  def avg_scores(self,cust_satisfaction,insights,lis):
    self.cust_satisfaction = cust_satisfaction
    self.insights = insights
    avg_score = (sum(lis))/(len(lis))
    return avg_score,cust_satisfaction,insights

scores = [34,77,88,65,99]
cust_satisfaction = "Little to no changes for the product"
insights = "Maybe generate new features"
analysis = customer_feedback()

print(analysis.avg_scores(cust_satisfaction,insights,scores))

#Qn 8:
string = "Todays vlog is about cooking spicy foods"
count = 0
string_low = string.lower()
for i in range(len(string_low)):
  if string[i]=="a" or string[i]=="e" or string[i]=="i" or string[i]=="o" or string[i]=="u":
    count+=1
print(f"The no of vowels in the function of content moderation system is {count}")

#Qn 9:
import datetime

event_reminder = datetime.datetime.now()
upcoming_events = datetime.datetime.day
event_reminder

"""LAB SECTION-4"""

#Qn 10:
try:
  money_invested = int(input("Enter the money invested for FD"))
  interest = int(input("Enter the interest percentage set by the bank"))
  fd_money = money_invested*365 + money_invested*(interest)
  print(fd_money)
except:
  print("The interest mentioned in the application is incorrect")

#Qn 11:
try:
  poll_no = int(input("Enter the input poll_no:"))
  poll_booth_no = int(input("Enter the poll_booth_no:"))
  poll_final = poll_no+poll_booth_no
  print(f"The required poll_no and poll_booth_no is {poll_final}")
except ValueError:
  print("The given data is corrupted as the data entered may be incorrect")

#Qn 12:
try:
  num = int(input("Enter the number"))
  div = num/0
  print(div)
except ZeroDivisionError:
  print("Any number cannot be divided by zero")

"""LAB SECTION-5"""

#Qn 13:
file = open("/content/LVADSUSR185_SanjayRam_1.txt","r")
print(file.read())
lis = []
file = open("/content/LVADSUSR185_SanjayRam_1.txt","w")
for i in range(3):
  input_string = input()
  lis.append(input_string)
  file.writelines(lis)
file.close()

#Qn 14:
with open("/content/Corporate compliance.txt","r") as log_file:
  print(log_file.readlines())
  print(log_file.read())
with open("/content/Corporate compliance.txt","w") as written_file:
  written_file.write("Tech compliance")

#Qn 15:
with open("/content/Corporate compliance.txt","w") as file:
  file.write("das")
with open("/content/Corporate compliance.txt","a") as append_file:
  append_file.write("double das")